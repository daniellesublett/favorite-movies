{"version":3,"sources":["fetch.js","MovieList/MovieList.js","MovieSearch/MovieSearch.js","MovieCard/MovieCard.js","SimilarMovies/SimilarMovies.js","App.js","serviceWorker.js","index.js"],"names":["ApiConfig","fetchMovie","id","fetch","then","response","json","fetchSimilar","movieList","list","listStatus","handleClick","className","map","original_title","onClick","movieSearch","props","type","onChange","value","movieCard","movieName","alt","altTag","src","poster","releaseDate","description","similarMovies","movie","App","state","trendingList","suggestionsList","userInput","selectedMovie","listLabel","inputChangedHandler","event","setState","target","getMovie","a","console","log","handleMovieClick","getSimilar","data","results","this","_","prevState","keyWord","fetchMoviesList","poster_path","overview","release_date","showPoster","showDescription","showRelease","posterAltTag","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7efe07fd.chunk.js","sourcesContent":["\nexport const ApiConfig = {\n    KEY: \"11fdff0a50cf7d845a2c73890befb6b2\",\n    BASE_URL: \"https://api.themoviedb.org/3\"\n};\n\nexport function fetchTrending() {\n    return fetch(`${ApiConfig.BASE_URL}/trending/movie/week?api_key=${ApiConfig.KEY}`)\n      .then(response => response.json()) \n}\n\nexport function fetchMoviesList(keyWord) {\n    return fetch(`${ApiConfig.BASE_URL}/search/movie?api_key=${ApiConfig.KEY}&query=${keyWord}`)\n      .then(response => response.json()) \n}\n\nexport function fetchMovie(id) {\n    return fetch(`${ApiConfig.BASE_URL}/movie/${id}?api_key=${ApiConfig.KEY}&language=en-US`)\n        .then(response => response.json())\n}\n\nexport function fetchSimilar(id) {\n    return fetch(`${ApiConfig.BASE_URL}/movie/${id}/similar?api_key=${ApiConfig.KEY}&language=en-US`)\n        .then(response => response.json())\n}\n","import React from 'react';\nimport \"./MovieList.css\";\n\nconst movieList = ({list, listStatus, handleClick}) => {\n\n    return (\n        <div className=\"movie-container\">\n        \t<h3 className=\"search-results\">{listStatus}</h3>\n            <ul>              \n              {list.map(({id, original_title}) => <li onClick={() => handleClick(id)}>{original_title}</li>)}\n            </ul>\n        </div>\n    );\n};\n\nexport default movieList;","import React from 'react';\nimport \"./MovieSearch.css\";\n\nconst movieSearch = (props) => {\n    const style = {\n\n    };\n\n    return (\n        <div className=\"movie-search\">\n            <div className=\"cover\">\n                <div className=\"tb\">\n                    <div className=\"td\">\n                      <input type={props.type}\n                        onChange={props.onChange}\n                        value={props.value} />                            \n                    </div>\n                    <div className=\"td\" className=\"s-cover\">\n                        <button type=\"submit\">\n                            <div className=\"s-circle\"></div>\n                            <span></span>\n                        </button>\n                    </div>                \n                </div>\n            </div>\n        </div>\n\n    );\n};\n\nexport default movieSearch;","import React from 'react';\nimport \"./MovieCard.css\";\n\nconst movieCard = (props) => {\n    const style = {\n\n    };\n\n    return (\n        <div className=\"movie-card\">\n            <h3 className=\"movieName\">{props.movieName}</h3>\n            <img className=\"poster\" alt={props.altTag} src= {props.poster}/>\n            <p className=\"release-date\">Release Date: {props.releaseDate}</p>\n            <p className=\"description\">{props.description}</p>\n        </div>\n    );\n};\n\nexport default movieCard;","import React from 'react';\nimport \"./SimilarMovies.css\";\n\nconst similarMovies = ({list, handleClick}) => {\n\n    return (\n        <div className=\"similar-container\">\n        \t<h3>Similar Movies</h3>\n\t        <ul>\n\t          {list.map(movie => <li onClick={() => handleClick(movie.id)}>{movie.original_title}</li>)}\n\t        </ul>\n        </div>\n    );\n};\n\nexport default similarMovies;","import React, { Component } from 'react';\nimport './App.css';\nimport {fetchTrending} from './fetch';\nimport {fetchMoviesList} from './fetch';\nimport {fetchMovie} from './fetch';\nimport {fetchSimilar} from './fetch';\nimport MovieList from './MovieList/MovieList';\nimport MovieSearch from './MovieSearch/MovieSearch';\nimport MovieCard from './MovieCard/MovieCard';\nimport SimilarMovies from './SimilarMovies/SimilarMovies';\n\nclass App extends Component {\n  state = {\n    trendingList:[],\n    suggestionsList: [],\n    userInput: '',\n    selectedMovie: {},\n    listLabel: \"Popular Movies\",\n    similarMovies: []\n\n  }\n\n  inputChangedHandler = ( event ) => {\n    this.setState( { userInput: event.target.value } );\n  }  \n\n  componentDidMount() {\n    let hardcodedID = 181812;\n    fetchTrending().then(data => this.setState({ trendingList: data.results }));\n    this.getSimilar(hardcodedID);\n    this.setState( { selectedMovie: this.getMovie(hardcodedID) } );  \n  } \n\n  componentDidUpdate(_, prevState) {\n    if (prevState.userInput !== this.state.userInput){\n      const { userInput: keyWord, selectedMovie: {id} } = this.state;\n      fetchMoviesList(keyWord).then(data => this.setState({ suggestionsList: data.results || []}));\n      this.setState( { listLabel: 'Search Results' } );\n      this.getSimilar(id);\n\n    } \n  }\n\n\n  showPoster(){\n    let image;\n    if(this.state.selectedMovie.poster_path == null){\n      image = \"https://portal.lancercorp.com/Content/Images/missing.png\";\n    } else {\n      image = \"https://image.tmdb.org/t/p/w500/\" + this.state.selectedMovie.poster_path;\n    }\n    return image;\n  }\n\n  posterAltTag(){\n    let altTag;\n    if(this.state.selectedMovie.poster_path == null){\n      altTag = \"no poster image for this film\"\n    } else {\n      altTag = this.state.selectedMovie.original_title + \" poster\";\n    }\n  }\n\n  showDescription(){\n    let description;\n    if(this.state.selectedMovie.overview == null){\n      description = \"No Description Available\";\n    } else {\n      description = this.state.selectedMovie.overview;\n    }\n    return description;\n  }  \n\n  showRelease(){\n    let releaseDate;\n    if(this.state.selectedMovie.release_date == null){\n      releaseDate = \"No release date available\";\n    } else {\n      releaseDate = this.state.selectedMovie.release_date;\n    }\n    return releaseDate;\n  }\n\n  showRelevantList(){\n    let movieList;\n    if(this.state.userInput === \"\"){\n      movieList = this.state.trendingList.map(movie => <li onClick={() => this.getMovie(movie.id)}>{movie.original_title}</li>);\n    } else {\n      movieList = this.state.suggestionsList.map(movie => <li onClick={() => this.getMovie(movie.id)}>{movie.original_title}</li>);\n    }\n    return movieList;\n  }\n\n getMovie = async (id) => {\n    console.log(id);\n    let selectedMovie = await fetchMovie(id);\n    this.setState({\n        selectedMovie: selectedMovie\n    })\n    console.log(this);\n  } \n\n  async getSimilar(id) {\n    console.log(id);\n    let similarMovies = await fetchSimilar(id)\n    console.log(similarMovies.results);\n      this.setState({\n          similarMovies: similarMovies.results\n      })        \n    } \n\n  handleMovieClick = (id) => {\n    this.getMovie(id);\n    this.getSimilar(id);\n  }\n\n\n\n\n  render () {   \n    const {userInput, trendingList, suggestionsList, selectedMovie, listLabel, similarMovies} = this.state;\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 className=\"pageTitle\">MOVIE LOOKUP</h1>\n        </header>\n        <section className=\"searchContainer\">\n          <MovieSearch\n            type=\"text\"\n            onChange={this.inputChangedHandler}\n            value={userInput}         \n          />\n        </section>\n        <section className=\"infoContainer\">\n          <MovieList \n            listStatus = {listLabel}\n            list={userInput == \"\" ? trendingList : suggestionsList}\n            handleClick={this.handleMovieClick}\n          />\n          <MovieCard \n            movieName = {selectedMovie.original_title}\n            poster = {this.showPoster()}\n            description = {this.showDescription()}\n            releaseDate = {this.showRelease()}\n            altTag = {this.posterAltTag()}\n          /> \n          <SimilarMovies \n            list={similarMovies}\n            handleClick={this.handleMovieClick}\n          />      \n        </section>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}